name: Deploy to Azure Container Apps

on:
  push:
    branches: [ "main", "master" ]
  workflow_dispatch:

concurrency:
  group: stack-api-deploy
  cancel-in-progress: true

env:
  # Non-sensitive defaults (edit if your names differ)
  RESOURCE_GROUP: stack-api-rg
  LOCATION: uaenorth
  ENVIRONMENT_NAME: stack-api-env
  WEB_IMAGE_NAME: stack-web
  API_IMAGE_NAME: stack-api
  STACK_IMAGE_NAME: stack-backend
  WEB_CONTAINER_APP_NAME: stack-web
  API_CONTAINER_APP_NAME: stack-api
  STACK_CONTAINER_APP_NAME: stack-backend
  IMAGE_TAG: ${{ github.run_number }}

jobs:
  build:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Docker Login to ACR
        uses: docker/login-action@v3
        with:
          registry: ${{ secrets.ACR_LOGIN_SERVER }}
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}

      - name: Build and Push Web Image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: web/Dockerfile
          push: true
          tags: |
            ${{ secrets.ACR_LOGIN_SERVER }}/${{ env.WEB_IMAGE_NAME }}:latest
            ${{ secrets.ACR_LOGIN_SERVER }}/${{ env.WEB_IMAGE_NAME }}:${{ env.IMAGE_TAG }}

      - name: Build and Push API Image
        uses: docker/build-push-action@v6
        with:
          context: stackapi/api
          file: stackapi/api/Dockerfile
          push: true
          tags: |
            ${{ secrets.ACR_LOGIN_SERVER }}/${{ env.API_IMAGE_NAME }}:latest
            ${{ secrets.ACR_LOGIN_SERVER }}/${{ env.API_IMAGE_NAME }}:${{ env.IMAGE_TAG }}

      - name: Build and Push STACK Backend Image
        uses: docker/build-push-action@v6
        with:
          context: stackapi
          file: stackapi/Dockerfile
          push: true
          tags: |
            ${{ secrets.ACR_LOGIN_SERVER }}/${{ env.STACK_IMAGE_NAME }}:latest
            ${{ secrets.ACR_LOGIN_SERVER }}/${{ env.STACK_IMAGE_NAME }}:${{ env.IMAGE_TAG }}

  deploy:
    name: Deploy to Azure Container Apps
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Ensure Container Apps CLI extension
        uses: azure/cli@v2
        with:
          inlineScript: |
            az extension add --name containerapp --upgrade

      - name: Deploy API Container
        uses: azure/cli@v2
        with:
          inlineScript: |
            az containerapp update \
              --name ${{ env.API_CONTAINER_APP_NAME }} \
              --resource-group ${{ env.RESOURCE_GROUP }} \
              --image ${{ secrets.ACR_LOGIN_SERVER }}/${{ env.API_IMAGE_NAME }}:${{ env.IMAGE_TAG }}

      - name: Deploy STACK Backend Container
        uses: azure/cli@v2
        with:
          inlineScript: |
            az containerapp update \
              --name ${{ env.STACK_CONTAINER_APP_NAME }} \
              --resource-group ${{ env.RESOURCE_GROUP }} \
              --image ${{ secrets.ACR_LOGIN_SERVER }}/${{ env.STACK_IMAGE_NAME }}:${{ env.IMAGE_TAG }}

      - name: Deploy Web Container
        uses: azure/cli@v2
        with:
          inlineScript: |
            az containerapp update \
              --name ${{ env.WEB_CONTAINER_APP_NAME }} \
              --resource-group ${{ env.RESOURCE_GROUP }} \
              --image ${{ secrets.ACR_LOGIN_SERVER }}/${{ env.WEB_IMAGE_NAME }}:${{ env.IMAGE_TAG }}

      - name: Get Web App URL
        id: geturl
        uses: azure/cli@v2
        with:
          inlineScript: |
            WEB_URL=$(az containerapp show \
              --name ${{ env.WEB_CONTAINER_APP_NAME }} \
              --resource-group ${{ env.RESOURCE_GROUP }} \
              --query properties.configuration.ingress.fqdn \
              --output tsv)
            echo "WEB_URL=https://${WEB_URL}" >> $GITHUB_OUTPUT

      - name: Print URL
        run: echo "Application URL: ${{ steps.geturl.outputs.WEB_URL }}"
